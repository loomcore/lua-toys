#!/usr/bin/env lua5.2

--[[

  gol 0.0.1

  A simple implementation of Conway's Game of Life, outputting to the
  terminal or to an animated GIF.

  Copyright (C) 2016 Phil Yeeles <phil@yeel.es>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see
  <http://www.gnu.org/licenses/>.

]]--

function pad(b)
  local rows = #b
  local cols = #b[1]
  local blankrow = {}
  for i = 0, cols+1 do
    blankrow[i] = "_"
  end
  b[0] = blankrow
  b[rows+1] = blankrow
  for i = 1, rows do
    b[i][0] = "_"
    b[i][cols+1] = "_"
  end
end

function countneighbours(b)
  local rows = #b - 1
  local cols = #b[1] - 1
  local out = {}
  for i = 1, rows do out[i] = {} end
  local neighbours = 0
  for i = 1, rows do
    for j = 1, cols do
      neighbours = 0
      for x = i-1, i+1 do
        for y = j-1, j+1 do
          if (not (x == i and y == j)) and (b[x][y] == "#") then
            neighbours = neighbours + 1
          end
        end
      end
      out[i][j] = neighbours
    end
  end
  return out
end

--[[
function update(b)
  local n = countneighbours(b)
  local rows = #n
  local cols = #n[1]
  local out = {}
  for i = 1, rows do out[i] = {} end
  for i = 1, rows do
    for j = 1, cols do
      if (n[i][j] < 2)
]]--

function update(b)
  local rows = #b - 1
  local cols = #b[1] - 1
  local out = {}
  for i = 1, rows do out[i] = {} end
  local neighbours = 0
  for i = 1, rows do
    for j = 1, cols do
      neighbours = 0
      for x = i-1, i+1 do
        for y = j-1, j+1 do
          if (not (x == i and y == j)) and (b[x][y] == "#") then
            neighbours = neighbours + 1
          end
        end
      end
      if (b[i][j] == "_") and (neighbours == 3) then
        out[i][j] = "#"
      elseif (b[i][j] == "#") and ((neighbours < 2) or (neighbours > 3)) then
        out[i][j] = "_"
      else
        out[i][j] = b[i][j]
      end
    end
  end
  pad(out)
  return out
end

function boardtostring(b)
  local out = ""
  local r = ""
  for i = 1, #b-1 do
    r = ""
    for j = 1, #b[1]-1 do
      r = r .. b[i][j]
    end
    out = out .. r .. "\n"
  end
  return out
end

if #arg ~= 3 then
  print("Usage: gol -p|-i <FILE> <GENS>")
  os.exit(-1)
else
  t = {}
  f = {}
  file = io.open(arg[2], "r")
  io.input(file)
  r = 1
  repeat
    f[r] = io.read()
    r = r + 1
  until (not f[r-1])
  io.close(file)
  for i = 1, #f do
    t[i] = {}
    f[i]:gsub(".",function(c) table.insert(t[i],c) end)
  end

  pad(t)
  gen = 0
  repeat
    if arg[1] == "-i" then
      local g = gen + 1000000000
      os.execute("echo \"" .. boardtostring(t) .. "\" > frame" .. g .. ".txt")
      -- NB: sdf doesn't have convert installed
      os.execute("convert frame" .. g .. ".txt frame" .. g .. ".gif")
    elseif arg[1] == "-p" then
      os.execute("sleep 0.1; clear")
      print(boardtostring(t))
    else
      print("Usage: gol -p|-i <FILE> <GENS>")
      os.exit(-1)
    end
    t = update(t)
    gen = gen + 1
  until (gen == tonumber(arg[3]))

  if arg[1] == "-i" then
    os.execute("gifsicle --delay=10 --loop frame*.gif > " .. arg[2] .. ".gif")
    os.execute("rm frame*")
  end
end
